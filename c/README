BUILDING PROJECTS

1. run "make" to build all projects of C language.

2. if you want to add new project, make a new directory and add directory name into 'arch.mk' file

1) cd <your-local-folder>/knowledges/c
2) mkdir <your-project-name>
3) add <your-project-name> into a arch.mk
SUBDIR = <other-project-name> <your-project-name> see arch.mk .
4) Each new project must have depends.mk loc_config.mk and Makefile to build your projects.
5) loc_config.mk definites 3 variables 'BIN', 'SHARE' and 'ARCHIVE' to specify the name of executable, dynamic lib and static lib
i.e.
BIN = demo
SHARE = libdemo.so
ARCHIVE = libdemo.a

6) depends.mk defintes 'DEPEND_PROS' to specify the dependency of your project
i.e.
DEPEND_PROS = aaa, 'aaa' also shall exist here.

Now DEPEND_PROS can not handle dependency and it only add target directory into -I, -L and -Wl,-rpath.

3. To build specific project, use "make Target="target-1 target-2"

4. To clean all temporary file generated by compiling, run "make clean"

5. If you only modified head file, Makefile will also detect that so you do not need to clean first.


COVERAGE
1. Run "make cov" or "make TARGET="aaa" cov" that you can get *.gcno file

2. After running the executable, *.gcda file will be generated

3. run "gcov xxx.c" and the coverage report "xxx.c.gcov" will be generated.
Use demo project as example. The format of coverage report file is like following.

        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include <stdio.h>
        -:    2:
        1:    3:int main(int argc, char ** argv)
        -:    4:{
        1:    5:    printf("Welcome ACJR Rookie\n");
        -:    6:
        1:    7:    return 0;
        -:    8:}


"-" means it's invalid line.
"1" means the count of code line is executed.

